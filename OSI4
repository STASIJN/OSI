#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <pthread.h>
#include <sys/types.h>
#include "settings.h"
#include "server.h"

void LEDS_OUT(char* indata, char LEDS, int i){
        
        if(LEDS == '1'){
            switch(i){
            
                case(0):strcpy(indata, "LED0: green");
                    break;
                case(1):strcpy(indata, "LED1: green");
                    break;
                case(2):strcpy(indata, "LED2: green");
                    break;
                case(3):strcpy(indata, "LED3: green");
                    break; 
            }
        }
        else {
            switch(i){
            
                case(0):strcpy(indata, "LED0: gray");
                    break;
                case(1):strcpy(indata, "LED1: gray");
                    break;
                case(2):strcpy(indata, "LED2: gray");
                    break;
                case(3):strcpy(indata, "LED3: gray");
                    break; 
            }
        }
        
    }

int main() {

    //BUFF for leds; 
    char LEDS[4] = {"1010"};
    char Buff_leds;
    // print info:
    fprintf(stderr, "main was started\r\n");

    // create shared buffer for data from stdin between main and server:
    struct st_shbuf *sharedbuf = malloc(sizeof(struct st_shbuf)); // создаем в куче
    sharedbuf->bufsize = SHAREDBUF_SIZE; // запоминаем размер буфера
    sharedbuf->buf = malloc(sharedbuf->bufsize); // память в куче под буфер
    memset(sharedbuf->buf, 0, sharedbuf->bufsize); // заливаем буфер нулями
    sharedbuf->mutex = malloc(sizeof(pthread_mutex_t)); // память под мьютекс
    pthread_mutex_init(sharedbuf->mutex, NULL); // инициализация мьютекса

    // create new thread for server: 
    pthread_t thread;
    if (pthread_create(&thread, NULL, server, (void *)sharedbuf) != 0) {
       fprintf(stderr, "error: pthread_create was failed\r\n");
       exit(-1);
    }

    // forever loop:
    char indata[STDIN_DATA_SIZE];

   
    
    while (1) {

       // 3.1. get data from stdin:
       fgets(indata, sizeof(indata), stdin);

      if((strcmp(indata, "button0: clicked")!=0)&&(strcmp(indata, "button1: clicked")!=0)&&(strcmp(indata, "button2: clicked")!=0)){
           // 3.2. push to buffer:
           pthread_mutex_lock(sharedbuf->mutex);
           if ((sharedbuf->bufsize - strlen(sharedbuf->buf) - 1) > strlen(indata)) {
              strcat(sharedbuf->buf, indata);
           }
           pthread_mutex_unlock(sharedbuf->mutex);
       }
       else {
           if (strcmp(indata, "button0: clicked")==0){
               Buff_leds = LEDS[3];
               LEDS[3] = LEDS[2];
               LEDS[2] = LEDS[1];
               LEDS[1] = LEDS[0];
               LEDS[0] = Buff_leds;
           }
           else if (strcmp(indata, "button1: clicked")==0){
               Buff_leds = LEDS[0];
               LEDS[0] = LEDS[1];
               LEDS[1] = LEDS[2];
               LEDS[2] = LEDS[3];
               LEDS[3] = Buff_leds;
           }
           else if (strcmp(indata, "button2: clicked")==0){
               LEDS[3] = '1';
               LEDS[2] = '0';
               LEDS[1] = '1';
               LEDS[0] = '0';
           }
           
           for(int i = 0; i < 4; i++){            
                pthread_mutex_lock(sharedbuf->mutex);
                LEDS_OUT(&indata, LEDS[i], i);
                memset(sharedbuf->buf, 0, sharedbuf->bufsize);
                
                if ((sharedbuf->bufsize - strlen(sharedbuf->buf) - 1) > strlen(indata)) {
                    strcat(sharedbuf->buf, indata);
                }
                
                sleep(1);
                pthread_mutex_unlock(sharedbuf->mutex);
                // wait server thread exit:
                pthread_join(thread, NULL);
               
           }
       }
       







       // 3.3. clear input buf:
       memset(indata, 0, sizeof(indata));

    }

    // wait server thread exit:
    pthread_join(thread, NULL);

    // print info:
    fprintf(stderr, "main was finished\r\n");
    free(sharedbuf->buf); // освобождаем память
    free(sharedbuf->mutex); // освобождаем память
    free(sharedbuf); // освобождаем память
    return (0);

}
